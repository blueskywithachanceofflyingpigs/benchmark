@states = {
  OR: 'Oregon',
  FL: 'Florida',
  CA: 'California',
  NY: 'New York',
  MI: 'Michigan'
}

@states[:WA] = 'Washington'
@states[:NM] = 'New Mexico'

@cities = {
  OR: ['Town1', 'Town2', 'Town3'],
  FL: ['Town11', 'Town121', 'Town31'],
  CA: ['Town111', 'Town1211', 'Town311'],
  NY: ['Town1111', 'Town12111', 'Town3111'],
  MI: ['Town11111', 'Town121111', 'Town31111'],
  WA: ['Town111111', 'Town1211111', 'Town311111'],
  NM: ['Town1111111', 'Town12111111', 'Town3111111']
}

@taxes = {
  OR: 7.1,
  FL: 7.2,
  CA: 7.3,
  NY: 7.4,
  MI: 7.5,
  WA: 7.6,
  NM: 7.7
}

def describe_state(name)
  name = name.to_sym
  simcity = @cities[name]
  count = @cities[name].length
  simpy = simcity.join(', ')
  puts "#{name} is for California. It has #{count} major cities: #{simpy}"
end

describe_state('CA')

def calculate_tax(name, amt)
  name = name.to_sym
  amt = amt.to_f
  rate = @taxes[name].to_f
  puts tot = (amt*rate/100).to_f.round(2)
end

calculate_tax('CA', 222)

def find_state_for_city(city_name)
 result = ""
 @cities.each do | state_code, city_arr |
   if city_arr.include?(city_name)
     result << "#{city_name} is in #{state_code}."
   end
 end
 puts result
end

find_state_for_city('Town2')

